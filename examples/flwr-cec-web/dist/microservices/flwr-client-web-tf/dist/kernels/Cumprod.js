/*! For license information please see Cumprod.js.LICENSE.txt */
import{backend_util,Cumprod,util}from"@tensorflow/tfjs-core";import{CppDType}from"./types";import{transpose}from"./Transpose";let wasmCumprod;function setup(e){wasmCumprod=e.wasm.cwrap(Cumprod,null,["number","number","number","number","number","number"])}export function cumprod(e){const{inputs:t,backend:s,attrs:n}=e,{x:a}=t,{axis:r,exclusive:p,reverse:o}=n,d=a.shape.length;util.assert("float32"===a.dtype||"int32"===a.dtype,(()=>`cumprod does not support ${a.dtype} tensors in the WASM backend`));const u=backend_util.getAxesPermutation([r],d);let m=a;null!==u&&(m=transpose({inputs:{x:a},attrs:{perm:u},backend:s}));const c=backend_util.getInnerMostAxes(1,d)[0];backend_util.assertAxesAreInnerMostDims("cumprod",[c],d);const i=s.makeOutput(m.shape,m.dtype),l=m.shape[c],b=s.dataIdMap.get(m.dataId).id,k=s.dataIdMap.get(i.dataId).id;wasmCumprod(b,p?1:0,o?1:0,l,k,CppDType[a.dtype]);let x=i;if(null!==u){const e=backend_util.getUndoAxesPermutation(u);x=transpose({inputs:{x:i},attrs:{perm:e},backend:s}),s.disposeData(m.dataId),s.disposeData(i.dataId)}return x}export const cumprodConfig={kernelName:Cumprod,backendName:"wasm",setupFunc:setup,kernelFunc:cumprod};