/*! For license information please see Reverse.js.LICENSE.txt */
import{Reverse,util}from"@tensorflow/tfjs-core";import{identity}from"./Identity";import{reshape}from"./Reshape";let wasmReverse;function setup(e){wasmReverse=e.wasm.cwrap(Reverse,null,["number","array","number","array","number","number"])}export function reverse(e){const{inputs:r,backend:t,attrs:a}=e,{x:s}=r,{dims:n}=a,p=util.parseAxisParam(n,s.shape);if(0===s.shape.length)return identity({inputs:{x:s},backend:t});const i=t.makeOutput(s.shape,s.dtype),u=t.dataIdMap.get(s.dataId).id,d=t.dataIdMap.get(i.dataId).id,m=new Uint8Array(new Int32Array(p).buffer),o=new Uint8Array(new Int32Array(s.shape).buffer);wasmReverse(u,m,p.length,o,s.shape.length,d);const c=reshape({inputs:{x:i},attrs:{shape:s.shape},backend:t});return t.disposeData(i.dataId),c}export const reverseConfig={kernelName:Reverse,backendName:"wasm",kernelFunc:reverse,setupFunc:setup};