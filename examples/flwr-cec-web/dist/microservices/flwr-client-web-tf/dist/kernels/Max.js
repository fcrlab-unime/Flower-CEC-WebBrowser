/*! For license information please see Max.js.LICENSE.txt */
import{backend_util,Max,util}from"@tensorflow/tfjs-core";import{permuteAxesAndTranspose}from"./kernel_utils";import{CppDType}from"./types";let wasmMax;function setup(e){wasmMax=e.wasm.cwrap(Max,null,["number","number","number","number"])}function max(e){const{backend:a,inputs:t,attrs:s}=e,{reductionIndices:n,keepDims:p}=s,{x:d}=t;let r=a.dataIdMap.get(d.dataId).id,o=d;const{transposed:i,axes:u,originalAxes:m,inputWasTransposed:c}=permuteAxesAndTranspose(d,n,a);c&&(o=i,r=a.dataIdMap.get(i.dataId).id);const l=o.shape.length;backend_util.assertAxesAreInnerMostDims("max",u,l);const[x,k]=backend_util.computeOutAndReduceShapes(o.shape,u),b=util.sizeFromShape(k),f=a.makeOutput(x,d.dtype);if(0!==util.sizeFromShape(o.shape)){const e=a.dataIdMap.get(f.dataId).id;wasmMax(r,CppDType[d.dtype],b,e)}if(c&&a.disposeData(i.dataId),p){const e=backend_util.expandShapeToKeepDim(f.shape,m);f.shape=e}return f}export const maxConfig={kernelName:Max,backendName:"wasm",setupFunc:setup,kernelFunc:max};