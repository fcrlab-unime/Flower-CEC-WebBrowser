/*! For license information please see ResizeBilinear.js.LICENSE.txt */
import{ResizeBilinear,util}from"@tensorflow/tfjs-core";import{cast}from"./Cast";let wasmResizeBilinear;function setup(e){wasmResizeBilinear=e.wasm.cwrap(ResizeBilinear,null,["number","number","number","number","number","number","number","number","number","number"])}function resizeBilinear(e){const{backend:a,inputs:t,attrs:i}=e,{images:n}=t,{alignCorners:r,halfPixelCenters:s,size:u}=i,[l,m]=u,[d,o,p,c]=n.shape,b=[d,l,m,c];let f,z=a.dataIdMap.get(n.dataId);"float32"!==z.dtype&&(f=cast({backend:a,inputs:{x:n},attrs:{dtype:"float32"}}),z=a.dataIdMap.get(f.dataId));const B=z.id,w=a.makeOutput(b,"float32");if(0===util.sizeFromShape(n.shape))return w;const I=a.dataIdMap.get(w.dataId).id;return wasmResizeBilinear(B,d,o,p,c,l,m,r?1:0,s?1:0,I),null!=f&&a.disposeData(f.dataId),w}export const resizeBilinearConfig={kernelName:ResizeBilinear,backendName:"wasm",setupFunc:setup,kernelFunc:resizeBilinear};