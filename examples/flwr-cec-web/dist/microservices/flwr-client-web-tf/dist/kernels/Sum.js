/*! For license information please see Sum.js.LICENSE.txt */
import{backend_util,Sum,util}from"@tensorflow/tfjs-core";import{permuteAxesAndTranspose}from"./kernel_utils";import{CppDType}from"./types";let wasmSum;function setup(e){wasmSum=e.wasm.cwrap(Sum,null,["number","number","number","number"])}function sum(e){const{backend:t,inputs:s,attrs:a}=e,{axis:n,keepDims:p}=a,{x:u}=s,m=t.dataIdMap.get(u.dataId).id;let d=m,r=u;const{transposed:i,axes:o,originalAxes:c,inputWasTransposed:l}=permuteAxesAndTranspose(u,n,t);let h=o;if(l){const e=t.dataIdMap.get(i.dataId).id;e!==m&&(r=i,d=e,h=backend_util.getInnerMostAxes(h.length,r.shape.length))}backend_util.assertAxesAreInnerMostDims("sum",h,r.shape.length);const[k,b]=backend_util.computeOutAndReduceShapes(r.shape,h),f=util.sizeFromShape(b),x=t.makeOutput(k,r.dtype);if(0!==util.sizeFromShape(r.shape)){const e=t.dataIdMap.get(x.dataId).id;wasmSum(d,f,CppDType[x.dtype],e)}if(l&&t.disposeData(i.dataId),p){const e=backend_util.expandShapeToKeepDim(x.shape,c);x.shape=e}return x}export const sumConfig={kernelName:Sum,backendName:"wasm",setupFunc:setup,kernelFunc:sum};