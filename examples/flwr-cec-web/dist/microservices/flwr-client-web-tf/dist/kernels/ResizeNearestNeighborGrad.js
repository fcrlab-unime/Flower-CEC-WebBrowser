/*! For license information please see ResizeNearestNeighborGrad.js.LICENSE.txt */
import{ResizeNearestNeighborGrad}from"@tensorflow/tfjs-core";import{cast}from"./Cast";let wasmResizeNearestNeighborGrad;function setup(e){wasmResizeNearestNeighborGrad=e.wasm.cwrap(ResizeNearestNeighborGrad,null,["number","number","number","array","array","boolean"])}function resizeNearestNeighborGrad(e){const{inputs:a,backend:r,attrs:t}=e,{images:s,dy:d}=a,{alignCorners:n}=t,i=r.makeOutput(s.shape,"float32");let o,p=r.dataIdMap.get(s.dataId);return"float32"!==p.dtype&&(o=cast({backend:r,inputs:{x:s},attrs:{dtype:"float32"}}),p=r.dataIdMap.get(o.dataId)),wasmResizeNearestNeighborGrad(r.dataIdMap.get(s.dataId).id,r.dataIdMap.get(d.dataId).id,r.dataIdMap.get(i.dataId).id,new Uint8Array(new Int32Array(s.shape).buffer),new Uint8Array(new Int32Array(d.shape).buffer),n),null!=o&&r.disposeData(o.dataId),i}export const resizeNearestNeighborGradConfig={kernelName:ResizeNearestNeighborGrad,backendName:"wasm",setupFunc:setup,kernelFunc:resizeNearestNeighborGrad};