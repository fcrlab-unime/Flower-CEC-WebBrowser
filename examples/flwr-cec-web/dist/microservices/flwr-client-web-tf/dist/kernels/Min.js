/*! For license information please see Min.js.LICENSE.txt */
import{backend_util,Min,util}from"@tensorflow/tfjs-core";import{permuteAxesAndTranspose}from"./kernel_utils";import{CppDType}from"./types";let wasmMin;function setup(e){wasmMin=e.wasm.cwrap(Min,null,["number","number","number","number"])}function min(e){const{backend:t,inputs:n,attrs:a}=e,{axis:s,keepDims:p}=a,{x:i}=n,d=t.dataIdMap.get(i.dataId).id;let o=d,r=i;const{transposed:m,axes:u,originalAxes:c,inputWasTransposed:l}=permuteAxesAndTranspose(i,s,t);if(l){const e=t.dataIdMap.get(m.dataId).id;e!==d&&(r=m,o=e)}const f=r.shape.length;backend_util.assertAxesAreInnerMostDims("min",u,f);const[k,b]=backend_util.computeOutAndReduceShapes(r.shape,u),h=util.sizeFromShape(b),M=t.makeOutput(k,r.dtype);if(0!==util.sizeFromShape(r.shape)){const e=t.dataIdMap.get(M.dataId).id;wasmMin(o,CppDType[i.dtype],h,e)}if(l&&t.disposeData(m.dataId),p){const e=backend_util.expandShapeToKeepDim(M.shape,c);M.shape=e}return M}export const minConfig={kernelName:Min,backendName:"wasm",setupFunc:setup,kernelFunc:min};