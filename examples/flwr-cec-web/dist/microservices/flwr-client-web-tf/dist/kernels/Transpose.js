/*! For license information please see Transpose.js.LICENSE.txt */
import{Transpose}from"@tensorflow/tfjs-core";import{identity}from"./Identity";import{CppDType}from"./types";let wasmTranspose;function setup(e){wasmTranspose=e.wasm.cwrap(Transpose,null,["number","array","number","number","number","array","number"])}export function transpose(e){const{inputs:t,backend:n,attrs:r}=e,[a,s]=removeOneSizeDims(t.x.shape,r.perm);let p=!0;for(let e=0;e<s.length;e++)s[e]!==e&&(p=!1);const o=computeOutShape(t.x.shape,r.perm),u={dataId:t.x.dataId,shape:a,dtype:t.x.dtype};if(p){const e=identity({inputs:t,backend:n});return e.shape=o,e}const m=n.makeOutput(o,u.dtype),d=n.dataIdMap.get(u.dataId).id,i=n.dataIdMap.get(m.dataId).id,l=new Uint8Array(new Int32Array(s).buffer),c=new Uint8Array(new Int32Array(u.shape).buffer);return wasmTranspose(d,c,u.shape.length,CppDType[u.dtype],i,l,s.length),m}function computeOutShape(e,t){const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];return n}function removeOneSizeDims(e,t){const n=[],r=[];for(let a=0;a<e.length;++a)1!==e[a]&&n.push(e[a]),1!==e[t[a]]&&r.push(t[a]);for(let e=0;e<r.length;++e){let t=-1;for(let n=0;n<r.length;++n)r[n]>=e&&(-1===t||r[t]>r[n])&&(t=n);r[t]=e}return[n,r]}export const transposeConfig={kernelName:Transpose,backendName:"wasm",kernelFunc:transpose,setupFunc:setup};