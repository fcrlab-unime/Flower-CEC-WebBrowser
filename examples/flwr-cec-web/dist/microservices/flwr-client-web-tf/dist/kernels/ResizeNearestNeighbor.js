/*! For license information please see ResizeNearestNeighbor.js.LICENSE.txt */
import{ResizeNearestNeighbor,util}from"@tensorflow/tfjs-core";import{cast}from"./Cast";let wasmResizeNearestNeighbor;function setup(e){wasmResizeNearestNeighbor=e.wasm.cwrap(ResizeNearestNeighbor,null,["number","number","number","number","number","number","number","number","number","number"])}function resizeNearestNeighbor(e){const{backend:t,inputs:a,attrs:r}=e,{images:s}=a,{alignCorners:i,halfPixelCenters:n,size:o}=r,[u,m]=o,[b,d,N,p]=s.shape,l=[b,u,m,p],g=t.makeOutput(l,"float32");if(0===util.sizeFromShape(s.shape))return g;let c,h=t.dataIdMap.get(s.dataId);"float32"!==h.dtype&&(c=cast({backend:t,inputs:{x:s},attrs:{dtype:"float32"}}),h=t.dataIdMap.get(c.dataId));const f=h.id,z=t.dataIdMap.get(g.dataId).id;return wasmResizeNearestNeighbor(f,b,d,N,p,u,m,i?1:0,n?1:0,z),null!=c&&t.disposeData(c.dataId),g}export const resizeNearestNeighborConfig={kernelName:ResizeNearestNeighbor,backendName:"wasm",setupFunc:setup,kernelFunc:resizeNearestNeighbor};