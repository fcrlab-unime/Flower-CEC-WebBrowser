/*! For license information please see Transform.js.LICENSE.txt */
import{Transform,util}from"@tensorflow/tfjs-core";let wasmTransform;function setup(e){wasmTransform=e.wasm.cwrap(Transform,null,["number","number","bool","number","number","number","number","number","number","array","number","array","number","number","number","number","number"])}function transform(e){const{backend:r,inputs:a,attrs:n}=e,{image:t,transforms:s}=a,{interpolation:u,fillMode:m,fillValue:o,outputShape:f}=n,[l,b,d,p]=t.shape,[i,c]=null!=f?f:[b,d],w=[l,i,c,p],h=new Uint8Array(new Int32Array(util.computeStrides(t.shape)).buffer),k=new Uint8Array(new Int32Array(util.computeStrides(w)).buffer),I=r.makeOutput(w,t.dtype),g=r.dataIdMap.get(I.dataId).id,y=r.dataIdMap.get(t.dataId).id,T=r.dataIdMap.get(s.dataId).id,A="nearest"===u?1:2;let M;switch(m){case"constant":default:M=1;break;case"reflect":M=2;break;case"wrap":M=3;break;case"nearest":M=4}return wasmTransform(y,T,s.shape[0]>1,l,i,c,p,d,b,h,t.shape.length-1,k,w.length-1,A,M,o,g),I}export const transformConfig={kernelName:Transform,backendName:"wasm",setupFunc:setup,kernelFunc:transform};