/*! For license information please see FusedBatchNorm.js.LICENSE.txt */
import{FusedBatchNorm,util}from"@tensorflow/tfjs-core";let wasmBatchNorm;function setup(a){wasmBatchNorm=a.wasm.cwrap(FusedBatchNorm,null,["number","number","number","number","number","number","number"])}function fusedBatchNorm(a){const{backend:t,inputs:e,attrs:d}=a,{varianceEpsilon:n}=d,{x:r,mean:u,variance:m,offset:s,scale:o}=e,c=t.dataIdMap.get(r.dataId).id,p=t.dataIdMap.get(u.dataId).id,i=t.dataIdMap.get(m.dataId).id,l=null!=s?t.dataIdMap.get(s.dataId).id:0,f=null!=o?t.dataIdMap.get(o.dataId).id:0,h=t.makeOutput(r.shape,r.dtype);if(0===util.sizeFromShape(r.shape))return h;const I=t.dataIdMap.get(h.dataId).id;return wasmBatchNorm(c,p,i,l,f,n,I),h}export const fusedBatchNormConfig={kernelName:FusedBatchNorm,backendName:"wasm",setupFunc:setup,kernelFunc:fusedBatchNorm};