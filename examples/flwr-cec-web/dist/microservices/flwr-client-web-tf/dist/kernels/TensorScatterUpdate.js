/*! For license information please see TensorScatterUpdate.js.LICENSE.txt */
import{scatter_util,TensorScatterUpdate,util}from"@tensorflow/tfjs-core";import{CppDType}from"./types";let wasmTensorScatterUpdate;function setup(e){wasmTensorScatterUpdate=e.wasm.cwrap(TensorScatterUpdate,null,["number","number","number","number","number","number","array","number","number","number"])}function tensorScatterUpdate(e){const{backend:t,inputs:a,attrs:r}=e,{tensor:n,indices:s,updates:p}=a,{}=r,d=t.makeOutput(n.shape,n.dtype);if(0===util.sizeFromShape(n.shape))return d;const{sliceRank:u,numUpdates:c,sliceSize:o,strides:i,outputSize:m}=scatter_util.calculateShapes(p,s,n.shape),l=t.dataIdMap.get(s.dataId).id,S=t.dataIdMap.get(p.dataId).id,b=t.dataIdMap.get(n.dataId).id,U=new Uint8Array(new Int32Array(i).buffer),f=t.dataIdMap.get(d.dataId).id;return wasmTensorScatterUpdate(l,S,CppDType[p.dtype],u,c,o,U,m,f,b),d}export const tensorScatterUpdateConfig={kernelName:TensorScatterUpdate,backendName:"wasm",setupFunc:setup,kernelFunc:tensorScatterUpdate};