/*! For license information please see Mean.js.LICENSE.txt */
import{backend_util,Mean,util}from"@tensorflow/tfjs-core";import{cast}from"./Cast";import{permuteAxesAndTranspose}from"./kernel_utils";let wasmMean;function setup(e){wasmMean=e.wasm.cwrap(Mean,null,["number, number, number"])}export function mean(e){const{backend:a,inputs:t,attrs:n}=e,{axis:s,keepDims:d}=n,{x:p}=t,o=a.dataIdMap.get(p.dataId).id;let i=o,r=p;const{transposed:u,axes:m,originalAxes:l,inputWasTransposed:c}=permuteAxesAndTranspose(p,s,a);let f=m;if(c){const e=a.dataIdMap.get(u.dataId).id;e!==o&&(r=u,i=e,f=backend_util.getInnerMostAxes(f.length,r.shape.length))}backend_util.assertAxesAreInnerMostDims("mean",f,r.shape.length);const[h,k]=backend_util.computeOutAndReduceShapes(r.shape,f),x=util.sizeFromShape(k);let I=r;"float32"!==r.dtype&&(I=cast({backend:a,inputs:{x:r},attrs:{dtype:"float32"}}),i=a.dataIdMap.get(I.dataId).id);const M=a.makeOutput(h,"float32");if(0!==util.sizeFromShape(r.shape)){const e=a.dataIdMap.get(M.dataId).id;wasmMean(i,x,e)}if(c&&a.disposeData(u.dataId),d){const e=backend_util.expandShapeToKeepDim(M.shape,l);M.shape=e}return"float32"!==r.dtype&&a.disposeData(I.dataId),M}export const meanConfig={kernelName:Mean,backendName:"wasm",setupFunc:setup,kernelFunc:mean};