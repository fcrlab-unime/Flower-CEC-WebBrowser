/*! For license information please see Cumsum.js.LICENSE.txt */
import{backend_util,Cumsum,util}from"@tensorflow/tfjs-core";import{CppDType}from"./types";import{transpose}from"./Transpose";let wasmCumsum;function setup(e){wasmCumsum=e.wasm.cwrap(Cumsum,null,["number","number","number","number","number","number"])}export function cumsum(e){const{inputs:t,backend:s,attrs:n}=e,{x:u}=t,{axis:a,exclusive:m,reverse:r}=n,p=u.shape.length;util.assert("float32"===u.dtype||"int32"===u.dtype,(()=>`cumsum does not support ${u.dtype} tensors in the WASM backend`));const o=backend_util.getAxesPermutation([a],p);let d=u;null!==o&&(d=transpose({inputs:{x:u},attrs:{perm:o},backend:s}));const c=backend_util.getInnerMostAxes(1,p)[0];backend_util.assertAxesAreInnerMostDims("cumsum",[c],p);const i=s.makeOutput(d.shape,d.dtype),l=d.shape[c],b=s.dataIdMap.get(d.dataId).id,k=s.dataIdMap.get(i.dataId).id;wasmCumsum(b,m?1:0,r?1:0,l,k,CppDType[u.dtype]);let x=i;if(null!==o){const e=backend_util.getUndoAxesPermutation(o);x=transpose({inputs:{x:i},attrs:{perm:e},backend:s}),s.disposeData(d.dataId),s.disposeData(i.dataId)}return x}export const cumsumConfig={kernelName:Cumsum,backendName:"wasm",setupFunc:setup,kernelFunc:cumsum};