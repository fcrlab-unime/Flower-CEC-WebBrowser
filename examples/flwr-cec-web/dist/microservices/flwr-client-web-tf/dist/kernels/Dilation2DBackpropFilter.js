/*! For license information please see Dilation2DBackpropFilter.js.LICENSE.txt */
import{backend_util,Dilation2DBackpropFilter}from"@tensorflow/tfjs-core";import{CppDType}from"./types";let wasmDilation2DBackpropFilter;function setup(t){wasmDilation2DBackpropFilter=t.wasm.cwrap(Dilation2DBackpropFilter,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}export function dilation2DBackpropFilter(t){const{inputs:e,backend:i,attrs:a}=t,{x:r,filter:n,dy:p}=e,{strides:d,pad:o,dilations:l}=a;if(r.dtype!==n.dtype||r.dtype!==p.dtype)throw new Error(`Dilation2DBackpropFilter error: x must have the same dtype as filter and dy. Got ${r.dtype}, ${n.dtype}, and ${p.dtype}`);const u=backend_util.computeDilation2DInfo(r.shape,n.shape,d,o,"NHWC",l),m=i.makeOutput(n.shape,n.dtype);return wasmDilation2DBackpropFilter(i.dataIdMap.get(r.dataId).id,i.dataIdMap.get(n.dataId).id,i.dataIdMap.get(p.dataId).id,i.dataIdMap.get(m.dataId).id,CppDType[r.dtype],u.batchSize,u.inChannels,u.inHeight,u.inWidth,u.outHeight,u.outWidth,u.strideHeight,u.strideWidth,u.dilationHeight,u.dilationWidth,u.filterHeight,u.filterWidth,u.padInfo.top,u.padInfo.left),m}export const dilation2DBackpropFilterConfig={kernelName:Dilation2DBackpropFilter,backendName:"wasm",setupFunc:setup,kernelFunc:dilation2DBackpropFilter};