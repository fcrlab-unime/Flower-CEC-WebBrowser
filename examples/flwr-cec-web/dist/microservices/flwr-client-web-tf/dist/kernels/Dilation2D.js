/*! For license information please see Dilation2D.js.LICENSE.txt */
import{backend_util,Dilation2D}from"@tensorflow/tfjs-core";import{CppDType}from"./types";let wasmDilation2D;function setup(t){wasmDilation2D=t.wasm.cwrap(Dilation2D,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}export function dilation2D(t){const{inputs:e,backend:n,attrs:i}=t,{x:a,filter:r}=e,{strides:d,pad:o,dilations:u}=i;if(a.dtype!==r.dtype)throw new Error(`Dilation2D error: x must have the same dtype as filter. Got ${a.dtype} and ${r.dtype}`);const p=backend_util.computeDilation2DInfo(a.shape,r.shape,d,o,"NHWC",u),m=n.makeOutput(p.outShape,a.dtype);return wasmDilation2D(n.dataIdMap.get(a.dataId).id,n.dataIdMap.get(r.dataId).id,n.dataIdMap.get(m.dataId).id,CppDType[a.dtype],p.batchSize,p.inChannels,p.inHeight,p.inWidth,p.outHeight,p.outWidth,p.strideHeight,p.strideWidth,p.dilationHeight,p.dilationWidth,p.filterHeight,p.filterWidth,p.padInfo.top,p.padInfo.left),m}export const dilation2DConfig={kernelName:Dilation2D,backendName:"wasm",setupFunc:setup,kernelFunc:dilation2D};