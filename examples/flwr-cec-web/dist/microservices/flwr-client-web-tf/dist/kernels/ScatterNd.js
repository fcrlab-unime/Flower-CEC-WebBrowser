/*! For license information please see ScatterNd.js.LICENSE.txt */
import{scatter_util,ScatterNd,util}from"@tensorflow/tfjs-core";import{CppDType}from"./types";let wasmScatterNd;function setup(t){wasmScatterNd=t.wasm.cwrap(ScatterNd,null,["number","number","number","number","number","number","array","number","number"])}function scatterNd(t){const{backend:e,inputs:a,attrs:r}=t,{indices:n,updates:d}=a,{shape:s}=r,u=e.makeOutput(s,d.dtype);if(0===util.sizeFromShape(s))return u;const{sliceRank:c,numUpdates:p,sliceSize:i,strides:m,outputSize:o}=scatter_util.calculateShapes(d,n,s),l=e.dataIdMap.get(n.dataId).id,b=e.dataIdMap.get(d.dataId).id,N=new Uint8Array(new Int32Array(m).buffer),f=e.dataIdMap.get(u.dataId).id;return wasmScatterNd(l,b,CppDType[d.dtype],c,p,i,N,o,f),u}export const scatterNdConfig={kernelName:ScatterNd,backendName:"wasm",setupFunc:setup,kernelFunc:scatterNd};