/*! For license information please see CropAndResize.js.LICENSE.txt */
import{CropAndResize}from"@tensorflow/tfjs-core";import{cast}from"./Cast";var InterpolationMethod;let wasmCropAndResize;function setup(e){wasmCropAndResize=e.wasm.cwrap(CropAndResize,null,["number","number","number","number","array","number","number","number","number","number"])}function cropAndResize(e){const{backend:a,inputs:t,attrs:n}=e,{method:r,extrapolationValue:d,cropSize:o}=n,{image:s,boxes:p,boxInd:i}=t,u=p.shape[0],[m,l]=o,c=[u,m,l,s.shape[3]];let b,I=a.dataIdMap.get(s.dataId);"float32"!==s.dtype&&(b=cast({backend:a,inputs:{x:s},attrs:{dtype:"float32"}}),I=a.dataIdMap.get(b.dataId));const f=I.id,A=a.dataIdMap.get(p.dataId).id,z=a.dataIdMap.get(i.dataId).id,w=a.makeOutput(c,"float32"),M=a.dataIdMap.get(w.dataId).id,R=new Uint8Array(new Int32Array(s.shape).buffer);return wasmCropAndResize(f,A,z,u,R,m,l,InterpolationMethod[r],d,M),null!=b&&a.disposeData(b.dataId),w}!function(e){e[e.bilinear=0]="bilinear",e[e.nearest=1]="nearest"}(InterpolationMethod||(InterpolationMethod={}));export const cropAndResizeConfig={kernelName:CropAndResize,backendName:"wasm",setupFunc:setup,kernelFunc:cropAndResize};