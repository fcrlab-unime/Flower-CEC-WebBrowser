/*! For license information please see PadV2.js.LICENSE.txt */
import{PadV2,util}from"@tensorflow/tfjs-core";import{fill}from"./Fill";import{CppDType}from"./types";let wasmPadV2;function setup(a){wasmPadV2=a.wasm.cwrap(PadV2,null,["number","array","number","number","array","array","number","number"])}function pad(a){const{inputs:{x:e},backend:t,attrs:{paddings:r,constantValue:n}}=a,p=r.map(((a,t)=>a[0]+e.shape[t]+a[1]));if(0===util.sizeFromShape(e.shape))return fill({backend:t,attrs:{shape:p,value:n,dtype:e.dtype}});const d=t.dataIdMap.get(e.dataId).id,s=t.makeOutput(p,e.dtype),u=t.dataIdMap.get(s.dataId).id,m=new Uint8Array(new Int32Array(e.shape).buffer),i=r.map((a=>a[0])),o=r.map((a=>a[1])),f=new Uint8Array(new Int32Array(i).buffer),l=new Uint8Array(new Int32Array(o).buffer);return wasmPadV2(d,m,e.shape.length,CppDType[e.dtype],f,l,n,u),s}export const padV2Config={kernelName:PadV2,backendName:"wasm",kernelFunc:pad,setupFunc:setup};