/*! For license information please see Prod.js.LICENSE.txt */
import{backend_util,Prod,util}from"@tensorflow/tfjs-core";import{permuteAxesAndTranspose}from"./kernel_utils";import{CppDType}from"./types";let wasmProd;function setup(e){wasmProd=e.wasm.cwrap(Prod,null,["number","number","number","number"])}function prod(e){const{backend:t,inputs:a,attrs:s}=e,{axis:n,keepDims:p}=s,{x:d}=a,r=t.dataIdMap.get(d.dataId).id;let o=r,i=d;const{transposed:u,axes:m,originalAxes:c,inputWasTransposed:l}=permuteAxesAndTranspose(d,n,t);let h=m;if(l){const e=t.dataIdMap.get(u.dataId).id;e!==r&&(i=u,o=e,h=backend_util.getInnerMostAxes(h.length,i.shape.length))}backend_util.assertAxesAreInnerMostDims("prod",h,i.shape.length);const[k,b]=backend_util.computeOutAndReduceShapes(i.shape,h),f=util.sizeFromShape(b),x=t.makeOutput(k,i.dtype);if(0!==util.sizeFromShape(i.shape)){const e=t.dataIdMap.get(x.dataId).id;wasmProd(o,f,CppDType[x.dtype],e)}if(l&&t.disposeData(u.dataId),p){const e=backend_util.expandShapeToKeepDim(x.shape,c);x.shape=e}return x}export const prodConfig={kernelName:Prod,backendName:"wasm",setupFunc:setup,kernelFunc:prod};