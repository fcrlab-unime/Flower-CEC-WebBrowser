/*! For license information please see SparseToDense.js.LICENSE.txt */
import{backend_util,SparseToDense,util}from"@tensorflow/tfjs-core";import{CppDType}from"./types";let wasmSparseToDense;function setup(e){wasmSparseToDense=e.wasm.cwrap(SparseToDense,null,["number","number","number","number","number","number","number","number","array","number","number"])}function sparseToDense(e){const{backend:a,inputs:s,attrs:t}=e,{sparseIndices:n,sparseValues:r,defaultValue:p}=s,{outputShape:u}=t,d=a.makeOutput(u,p.dtype);if(0===util.sizeFromShape(u))return d;const{sliceRank:o,numUpdates:m,sliceSize:i,strides:c,outputSize:l}=backend_util.calculateShapes(r,n,u),b=a.dataIdMap.get(n.dataId).id,f=a.dataIdMap.get(r.dataId).id,D=a.dataIdMap.get(p.dataId).id,S=new Uint8Array(new Int32Array(c).buffer),T=a.dataIdMap.get(d.dataId).id;return wasmSparseToDense(b,f,r.shape.length,D,CppDType[p.dtype],o,m,i,S,l,T),d}export const sparseToDenseConfig={kernelName:SparseToDense,backendName:"wasm",setupFunc:setup,kernelFunc:sparseToDense};