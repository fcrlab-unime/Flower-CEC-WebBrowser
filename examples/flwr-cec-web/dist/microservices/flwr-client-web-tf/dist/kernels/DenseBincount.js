/*! For license information please see DenseBincount.js.LICENSE.txt */
import{DenseBincount}from"@tensorflow/tfjs-core";import{CppDType}from"./types";let wasmDenseBincount;function setup(e){wasmDenseBincount=e.wasm.cwrap("DenseBincount",null,["number","array","number","number","boolean","number","number","boolean","number"])}function denseBincount(e){const{backend:n,inputs:t,attrs:u}=e,{x:s,weights:r}=t,{size:a,binaryOutput:o}=u,p=0!==r.shape.reduce(((e,n)=>e*n),1),c=1===s.shape.length?[a]:[s.shape[0],a],i=n.makeOutput(c,r.dtype);function m(e){return n.dataIdMap.get(e.dataId).id}return wasmDenseBincount(m(s),new Uint8Array(new Int32Array(s.shape).buffer),s.shape.length,a,p,m(r),CppDType[r.dtype],o,m(i)),i}export const denseBincountConfig={kernelName:DenseBincount,backendName:"wasm",setupFunc:setup,kernelFunc:denseBincount};