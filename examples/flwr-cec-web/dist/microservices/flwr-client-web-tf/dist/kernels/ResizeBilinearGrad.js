/*! For license information please see ResizeBilinearGrad.js.LICENSE.txt */
import{ResizeBilinearGrad}from"@tensorflow/tfjs-core";import{cast}from"./Cast";let wasmResizeBilinearGrad;function setup(a){wasmResizeBilinearGrad=a.wasm.cwrap(ResizeBilinearGrad,null,["number","number","number","array","array","boolean"])}function resizeBilinearGrad(a){const{inputs:e,backend:r,attrs:t}=a,{images:n,dy:i}=e,{alignCorners:d}=t,s=r.makeOutput(n.shape,"float32");let l,p=r.dataIdMap.get(n.dataId);return"float32"!==p.dtype&&(l=cast({backend:r,inputs:{x:n},attrs:{dtype:"float32"}}),p=r.dataIdMap.get(l.dataId)),wasmResizeBilinearGrad(r.dataIdMap.get(n.dataId).id,r.dataIdMap.get(i.dataId).id,r.dataIdMap.get(s.dataId).id,new Uint8Array(new Int32Array(n.shape).buffer),new Uint8Array(new Int32Array(i.shape).buffer),d),null!=l&&r.disposeData(l.dataId),s}export const resizeBilinearGradConfig={kernelName:ResizeBilinearGrad,backendName:"wasm",setupFunc:setup,kernelFunc:resizeBilinearGrad};