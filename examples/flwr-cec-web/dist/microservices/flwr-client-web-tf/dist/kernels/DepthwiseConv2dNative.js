/*! For license information please see DepthwiseConv2dNative.js.LICENSE.txt */
import{backend_util,DepthwiseConv2dNative}from"@tensorflow/tfjs-core";let wasmDepthwiseConv2d;function setup(e){wasmDepthwiseConv2d=e.wasm.cwrap(DepthwiseConv2dNative,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function depthwiseConv2d(e){const{inputs:t,attrs:n,backend:a}=e,{x:d,filter:o}=t,i=a.dataIdMap.get(d.dataId).id,s=a.dataIdMap.get(o.dataId).id,{strides:r,dilations:u,pad:p,dimRoundingMode:m}=n,h=null==u?[1,1]:u,b=backend_util.computeConv2DInfo(d.shape,o.shape,r,h,p,m,!0),l=b.filterHeight,w=b.filterWidth,f=b.padInfo.top,c=b.padInfo.right,v=b.padInfo.bottom,C=b.padInfo.left,I=b.dilationHeight,g=b.dilationWidth,k=b.strideHeight,D=b.strideWidth,N=b.inChannels,F=b.outChannels,M="SAME"===b.padInfo.type?1:0;if("channelsLast"!==b.dataFormat)throw new Error(`wasm backend DepthwiseConv2dNative does not support dataFormat:'${b.dataFormat}'. Please use 'channelsLast'.`);const H=a.makeOutput(b.outShape,"float32"),W=a.dataIdMap.get(H.dataId).id;return wasmDepthwiseConv2d(i,d.shape[0],d.shape[1],d.shape[2],s,l,w,f,c,v,C,M,I,g,k,D,N,F,W),H}export const depthwiseConv2dNativeConfig={kernelName:DepthwiseConv2dNative,backendName:"wasm",setupFunc:setup,kernelFunc:depthwiseConv2d};