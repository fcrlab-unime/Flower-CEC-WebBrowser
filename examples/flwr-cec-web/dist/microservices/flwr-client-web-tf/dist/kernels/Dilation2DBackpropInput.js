/*! For license information please see Dilation2DBackpropInput.js.LICENSE.txt */
import{backend_util,Dilation2DBackpropInput}from"@tensorflow/tfjs-core";import{CppDType}from"./types";let wasmDilation2DBackpropInput;function setup(t){wasmDilation2DBackpropInput=t.wasm.cwrap(Dilation2DBackpropInput,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}export function dilation2DBackpropInput(t){const{inputs:e,backend:n,attrs:a}=t,{x:p,filter:i,dy:r}=e,{strides:d,pad:o,dilations:u}=a;if(p.dtype!==i.dtype||p.dtype!==r.dtype)throw new Error(`Dilation2DBackpropInput error: x must have the same dtype as filter and dy. Got ${p.dtype}, ${i.dtype}, and ${r.dtype}`);const m=backend_util.computeDilation2DInfo(p.shape,i.shape,d,o,"NHWC",u),l=n.makeOutput(p.shape,p.dtype);return wasmDilation2DBackpropInput(n.dataIdMap.get(p.dataId).id,n.dataIdMap.get(i.dataId).id,n.dataIdMap.get(r.dataId).id,n.dataIdMap.get(l.dataId).id,CppDType[p.dtype],m.batchSize,m.inChannels,m.inHeight,m.inWidth,m.outHeight,m.outWidth,m.strideHeight,m.strideWidth,m.dilationHeight,m.dilationWidth,m.filterHeight,m.filterWidth,m.padInfo.top,m.padInfo.left),l}export const dilation2DBackpropInputConfig={kernelName:Dilation2DBackpropInput,backendName:"wasm",setupFunc:setup,kernelFunc:dilation2DBackpropInput};