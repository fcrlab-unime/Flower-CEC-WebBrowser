/*! For license information please see Conv2DBackpropInput.js.LICENSE.txt */
import{backend_util,Conv2DBackpropInput,util}from"@tensorflow/tfjs-core";let wasmConv2DBackpropInput;function setup(n){wasmConv2DBackpropInput=n.wasm.cwrap(Conv2DBackpropInput,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function conv2DBackpropInput(n){const{backend:e,inputs:t,attrs:u}=n,{dy:a,filter:r}=t,{strides:p,pad:o,dataFormat:m,dimRoundingMode:i,inputShape:d}=u,b=backend_util.convertConv2DDataFormat(m),c=backend_util.computeConv2DInfo(d,r.shape,p,1,o,i,!1,b),{batchSize:s,filterHeight:l,filterWidth:h,inChannels:I,inHeight:k,inWidth:f,outChannels:v,outHeight:D,outWidth:C,strideHeight:g,strideWidth:B}=c,w=l-1-c.padInfo.top,S=h-1-c.padInfo.left,F="channelsLast"===c.dataFormat,H=util.computeStrides(c.inShape),M=util.computeStrides(a.shape),[W,_,N]=util.computeStrides(r.shape),j=H[0],x=F?H[1]:H[2],y=F?H[2]:1,z=F?1:H[1],L=M[0],O=F?M[1]:M[2],R=F?M[2]:1,q=F?1:M[1],A=e.makeOutput(c.inShape,"float32"),E=e.dataIdMap.get(A.dataId).id,G=e.dataIdMap.get(a.dataId).id,J=e.dataIdMap.get(r.dataId).id;return wasmConv2DBackpropInput(G,J,s,l,h,k,f,I,D,C,v,g,B,w,S,W,_,N,j,x,y,z,L,O,R,q,E),A}export const conv2DBackpropInputConfig={kernelName:Conv2DBackpropInput,backendName:"wasm",setupFunc:setup,kernelFunc:conv2DBackpropInput};