/*! For license information please see StridedSlice.js.LICENSE.txt */
import{slice_util,StridedSlice,util}from"@tensorflow/tfjs-core";import{reshape}from"./Reshape";import{slice}from"./Slice";let wasmStridedSlice;function setup(e){wasmStridedSlice=e.wasm.cwrap(StridedSlice,null,["number","array","number","array","array","array","array","array","number","number"])}export function stridedSlice(e){const{backend:t,inputs:a,attrs:r}=e,{x:i}=a,{begin:s,end:n,strides:d,beginMask:l,endMask:p,ellipsisMask:u,newAxisMask:c,shrinkAxisMask:f}=r,{finalShapeSparse:o,finalShape:m,isIdentity:S,sliceDim0:h,isSimpleSlice:b,begin:w,end:y,strides:k}=slice_util.sliceInfo(i.shape,s,n,d,l,p,u,c,f);let I;if(S)I=reshape({inputs:{x:i},backend:t,attrs:{shape:m}});else if(h||b){util.assert(i.shape.length>=1,(()=>`Input must have rank at least 1, got: ${i.shape.length}`));const e=slice_util.computeOutShape(w,y,k),a=slice({inputs:{x:i},backend:t,attrs:{begin:w,size:e}});I=reshape({inputs:{x:a},backend:t,attrs:{shape:m}}),t.disposeData(a.dataId)}else{const e=t.makeOutput(o,"float32"),a=t.dataIdMap.get(i.dataId).id,r=new Uint8Array(new Int32Array(util.computeStrides(i.shape)).buffer),s=new Uint8Array(new Int32Array(w).buffer),n=new Uint8Array(new Int32Array(y).buffer),d=new Uint8Array(new Int32Array(k).buffer),l=new Uint8Array(new Int32Array(o).buffer),p=new Uint8Array(new Int32Array(util.computeStrides(o)).buffer),u=t.dataIdMap.get(e.dataId).id;wasmStridedSlice(a,r,i.shape.length,s,n,d,l,p,o.length,u),I=reshape({inputs:{x:e},backend:t,attrs:{shape:m}}),t.disposeData(e.dataId)}return I}export const stridedSliceConfig={kernelName:StridedSlice,backendName:"wasm",setupFunc:setup,kernelFunc:stridedSlice};